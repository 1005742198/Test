<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		"
	default-lazy-init="true">

	<description>Spring Configuration</description>
	<!-- 加密的时候会用到它，继承自Spring的配置文件解析父类，做解密处理，否则用context:property-placeholder -->
	<!-- <bean id="placeholderConfig"
		class="com.obob.test.support.PropertyPlaceholderConfigExt">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
				<value>classpath:rcc/db.properties</value>
			</list>
		</property>
	</bean>	 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:config.properties" />
	
	<context:component-scan base-package="com.obob"/>
	
 	<!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.huajin"/>
        <property name="typeAliasesSuperType" value="com.huajin.baymax.db.BaseEntity"/>
        <property name="mapperLocations">
        	<array>
        		<value>classpath:/mybatis/mappings/*.xml</value>
        		<value>classpath:/mybatis/mappings/*/*.xml</value>
        		<value>classpath:/commander/mybatis/mappings/*.xml</value>
        	</array>
        </property>
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
    </bean>
    
    <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.huajin"/>
        <property name="annotationClass" value="com.huajin.baymax.db.annotation.MyBatisDao"/>
    </bean>
    
    <!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" primary="true">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!-- MyBatis end -->
    
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${Core_DB.url}"/>
		<property name="username" value="${Core_DB.user}"/>
		<property name="password" value="${Core_DB.password}"/>
		<property name="initialSize" value="10"/>
        <property name="minIdle" value="10"/>
        <property name="maxActive" value="50"/>
        <property name="maxWait" value="60000" />
        <property name="timeBetweenEvictionRunsMillis" value="9000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="validationQueryTimeout" value="60" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="true" />
	    <property name="testOnReturn" value="false" />
        <property name="poolPreparedStatements" value="false" />
	    <property name="filters" value="stat" /> 
	</bean>
	
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
	    <property name="patterns">
	        <list>
	            <value>com.huajin.tradeserver.service.*Service\..*</value>
	        </list>
	    </property>
	</bean>
	<aop:config>
	    <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
<!-- 	<import resource="classpath:spring/spring-rest.xml"/> -->
	<import resource="classpath:spring/spring-cache.xml"/>
	<import resource="classpath:spring/spring-service.xml"/>
	<import resource="classpath:spring/spring-dubbo-provider.xml"/>
	<import resource="classpath:spring/spring-mq-producer.xml"/>
	<import resource="classpath:spring/spring-mq-consumer.xml"/>
	<import resource="classpath:spring/spring-aop.xml"/>
</beans>
